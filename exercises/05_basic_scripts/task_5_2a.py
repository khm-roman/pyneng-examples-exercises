# -*- coding: utf-8 -*-
"""
Задание 5.2a

Всё, как в задании 5.2, но, если пользователь ввел адрес хоста, а не адрес сети,
надо преобразовать адрес хоста в адрес сети и вывести адрес сети и маску,
как в задании 5.2.

Пример адреса сети (все биты хостовой части равны нулю):
* 10.0.1.0/24
* 190.1.0.0/16

Пример адреса хоста:
* 10.0.1.1/24 - хост из сети 10.0.1.0/24
* 10.0.5.195/28 - хост из сети 10.0.5.192/28

Если пользователь ввел адрес 10.0.1.1/24, вывод должен быть таким:

Network:
10        0         1         0
00001010  00000000  00000001  00000000

Mask:
/24
255       255       255       0
11111111  11111111  11111111  00000000

Проверить работу скрипта на разных комбинациях хост/маска, например:
    10.0.5.195/28, 10.0.1.1/24

Подсказка:
Есть адрес хоста в двоичном формате и маска сети 28. Адрес сети это первые 28 бит
адреса хоста + 4 ноля.
То есть, например, адрес хоста 10.1.1.195/28 в двоичном формате будет
bin_ip = "00001010000000010000000111000011"

А адрес сети будет первых 28 символов из bin_ip + 0000 (4 потому что всего
в адресе может быть 32 бита, а 32 - 28 = 4)
00001010000000010000000111000000

Ограничение: Все задания надо выполнять используя только пройденные темы.

"""
net = input ('Enter network in format x.x.x.x/xx: ')
mask = net.split('/')[1]
mask_b = "1" * int(mask) + "0" * (32-int(mask))
mask_dd = [int(mask_b[0:8], 2), int(mask_b[8:16], 2), int(mask_b[16:24],2), int(mask_b[24:32], 2)]
ip = net.split('/')[0].split('.')
ip_b = '{:08b}{:08b}{:08b}{:08b}'.format(int(ip[0]), int(ip[1]), int(ip[2]), int(ip[3]))
net_b = (ip_b[0:int(mask)]) + "0" * (32-int(mask))
net_dd = [int(net_b[0:8], 2), int(net_b[8:16], 2), int(net_b[16:24],2), int(net_b[24:32], 2)]

ip_template = '''
Network:
{0:<10}{1:<10}{2:<10}{3:<10}
{0:08b}  {1:08b}  {2:08b}  {3:08b}
'''
print(ip_template.format(net_dd[0], net_dd[1], net_dd[2], net_dd[3]))

mask_template = '''
Mask:
/{4}
{0:<10}{1:<10}{2:<10}{3:<10}
{0:08b}  {1:08b}  {2:08b}  {3:08b}
'''
print(mask_template.format(mask_dd[0], mask_dd[1], mask_dd[2], mask_dd[3], mask))